#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Take the APOKASC training set and test sets, as generated by Turbospectrum, and pass them through 4FS.
"""

import argparse
import os
from os import path as os_path
import time
import re
import logging

from fourgp_speclib import SpectrumLibrarySqlite
from fourgp_fourfs import FourFS

logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(levelname)s:%(filename)s:%(message)s',
                    datefmt='%d/%m/%Y %H:%M:%S')
logger = logging.getLogger(__name__)

# Read input parameters
our_path = os_path.split(os_path.abspath(__file__))[0]
root_path = os_path.join(our_path, "..", "..")
pid = os.getpid()
parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('--input-library',
                    required=False,
                    default="APOKASC_trainingset_turbospec",
                    dest="input_library",
                    help="Specify the name of the SpectrumLibrary we are to read input spectra from.")
parser.add_argument('--output-library',
                    required=False,
                    default="APOKASC_trainingset_4fs",
                    dest="output_library",
                    help="Specify the name of the SpectrumLibrary we are to feed synthesized spectra into.")
parser.add_argument('--binary-path',
                    required=False,
                    default=root_path,
                    dest="binary_path",
                    help="Specify a directory where 4FS package is installed.")
parser.add_argument('--create',
                    required=False,
                    action='store_true',
                    dest="create",
                    help="Create a clean SpectrumLibrary to feed synthesized spectra into")
parser.add_argument('--no-create',
                    required=False,
                    action='store_false',
                    dest="create",
                    help="Do not create a clean SpectrumLibrary to feed synthesized spectra into")
parser.set_defaults(create=True)
parser.add_argument('--log-file',
                    required=False,
                    default="/tmp/turbospec_apokasc_{}.log".format(pid),
                    dest="log_to",
                    help="Specify a log file where we log our progress.")
args = parser.parse_args()

logger.info("Running 4FS on spectra with arguments <{}> <{}>".format(args.input_library, args.output_library))

# Set path to workspace where we create libraries of spectra
workspace = os_path.join(our_path, "..", "workspace")
os.system("mkdir -p {}".format(workspace))

# Open input SpectrumLibrary
library_name = re.sub("/", "_", args.input_library)
library_path = os_path.join(workspace, library_name)
input_library = SpectrumLibrarySqlite(path=library_path, create=False)

# Create new SpectrumLibrary
library_name = re.sub("/", "_", args.output_library)
library_path = os_path.join(workspace, library_name)
output_library = SpectrumLibrarySqlite(path=library_path, create=args.create)

# Instantiate 4FS wrapper
etc_wrapper = FourFS(
    path_to_4fs=os_path.join(args.binary_path, "OpSys/OpSim")
)

# Fetch list of spectra to process
input_spectra_ids = input_library.search(continuum_normalised=0)

# Loop over spectra to process
with open(args.log_to, "w") as result_log:
    for input_spectrum_id in input_spectra_ids:
        # Open Spectrum data from disk
        input_spectrum = input_library.open(ids=input_spectrum_id['specId'])

        # Look up the name of the star we've just loaded
        object_name = input_spectrum.metadata['Starname']

        # Write log message
        result_log.write("[{}] {}... ".format(time.asctime(), object_name))
        result_log.flush()

        # Search for the continuum-normalised version of this same object
        continuum_normalised_spectrum_id = input_spectrum.search(Starname=object_name, continuum_normalised=1)

        # Check that continuum-normalised spectrum exists
        assert len(continuum_normalised_spectrum_id) == 1, "Could not find continuum-normalised spectrum."

        # Load the continuum-normalised version
        input_spectrum_continuum_normalised = input_library.open(ids=continuum_normalised_spectrum_id['specId'])

# Clean up 4FS
etc_wrapper.close()
