#!/usr/bin/env python
# -*- coding: utf-8 -*-

"""
Take a library of spectra, perhaps generated by Turbospectrum, and pass them through 4FS.
"""

import argparse
import os
from os import path as os_path
import time
import re
import logging

from fourgp_speclib import SpectrumLibrarySqlite
from fourgp_fourfs import FourFS

logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(levelname)s:%(filename)s:%(message)s',
                    datefmt='%d/%m/%Y %H:%M:%S')
logger = logging.getLogger(__name__)

# Read input parameters
our_path = os_path.split(os_path.abspath(__file__))[0]
root_path = os_path.join(our_path, "..", "..")
pid = os.getpid()
parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('--input-library',
                    required=False,
                    default="turbospec_apokasc_training_set",
                    dest="input_library",
                    help="Specify the name of the SpectrumLibrary we are to read input spectra from.")
parser.add_argument('--output-library-lrs',
                    required=False,
                    default="4fs_apokasc_training_set_lrs",
                    dest="output_library_lrs",
                    help="Specify the name of the SpectrumLibrary we are to feed synthesized LRS spectra into.")
parser.add_argument('--output-library-hrs',
                    required=False,
                    default="4fs_apokasc_training_set_hrs",
                    dest="output_library_hrs",
                    help="Specify the name of the SpectrumLibrary we are to feed synthesized HRS spectra into.")
parser.add_argument('--snr-definition',
                    action="append",
                    dest="snr_definitions",
                    help="Specify a way of defining SNR, in the form 'name,minimum,maximum', meaning we calculate the median SNR per pixel between minimum and maximum wavelengths in Angstrom.")
parser.add_argument('--snr-list',
                    required=False,
                    default="5,10,15,20,50,100,250",
                    dest="snr_list",
                    help="Specify a comma-separated list of the SNRs that 4FS is to degrade spectra to.")
parser.add_argument('--snr-definitions-lrs',
                    required=False,
                    default="",
                    dest="snr_definitions_lrs",
                    help="Specify the SNR definitions to use for the R, G and B bands of 4MOST LRS.")
parser.add_argument('--snr-definitions-hrs',
                    required=False,
                    default="",
                    dest="snr_definitions_hrs",
                    help="Specify the SNR definitions to use for the R, G and B bands of 4MOST HRS.")
parser.add_argument('--binary-path',
                    required=False,
                    default=root_path,
                    dest="binary_path",
                    help="Specify a directory where 4FS package is installed.")
parser.add_argument('--create',
                    required=False,
                    action='store_true',
                    dest="create",
                    help="Create a clean SpectrumLibrary to feed synthesized spectra into")
parser.add_argument('--no-create',
                    required=False,
                    action='store_false',
                    dest="create",
                    help="Do not create a clean SpectrumLibrary to feed synthesized spectra into")
parser.set_defaults(create=True)
parser.add_argument('--log-file',
                    required=False,
                    default="/tmp/fourfs_apokasc_{}.log".format(pid),
                    dest="log_to",
                    help="Specify a log file where we log our progress.")
args = parser.parse_args()

logger.info("Running 4FS on spectra with arguments <{}> <{}> <{}>".format(args.input_library,
                                                                          args.output_library_lrs,
                                                                          args.output_library_hrs))

# Set path to workspace where we create libraries of spectra
workspace = os_path.join(our_path, "..", "workspace")
os.system("mkdir -p {}".format(workspace))

# Open input SpectrumLibrary
library_name = re.sub("/", "_", args.input_library)
library_path = os_path.join(workspace, library_name)
input_library = SpectrumLibrarySqlite(path=library_path, create=False)

# Create new SpectrumLibrary
output_libraries = {}

for mode in ({"name": "LRS", "library": args.output_library_lrs},
             {"name": "HRS", "library": args.output_library_hrs}):
    library_name = re.sub("/", "_", mode['library'])
    library_path = os_path.join(workspace, library_name)
    output_libraries[mode['name']] = SpectrumLibrarySqlite(path=library_path, create=args.create)

# Definitions of SNR
if (args.snr_definitions is None) or (len(args.snr_definitions) < 1):
    snr_definitions = None
else:
    snr_definitions = []
    for snr_definition in args.snr_definitions:
        words = snr_definition.split(",")
        snr_definitions.append([words[0], float(words[1]), float(words[2])])

if len(args.snr_definitions_lrs) < 1:
    snr_definitions_lrs = None
else:
    snr_definitions_lrs = args.snr_definitions_lrs.split(",")
    assert len(snr_definitions_lrs) == 3

if len(args.snr_definitions_hrs) < 1:
    snr_definitions_hrs = None
else:
    snr_definitions_hrs = args.snr_definitions_hrs.split(",")
    assert len(snr_definitions_hrs) == 3

snr_list = [float(item.strip()) for item in args.snr_list.split(",")]

# Instantiate 4FS wrapper
etc_wrapper = FourFS(
    path_to_4fs=os_path.join(args.binary_path, "OpSys/ETC"),
    snr_definitions=snr_definitions,
    lrs_use_snr_definitions=snr_definitions_lrs,
    hrs_use_snr_definitions=snr_definitions_hrs,
    snr_list=snr_list
)

# Fetch list of spectra to process
input_spectra_ids = input_library.search(continuum_normalised=0)

# Loop over spectra to process
with open(args.log_to, "w") as result_log:
    for input_spectrum_id in input_spectra_ids:
        logger.info("Working on <{}>".format(input_spectrum_id['filename']))
        # Open Spectrum data from disk
        input_spectrum_array = input_library.open(ids=input_spectrum_id['specId'])
        input_spectrum = input_spectrum_array.extract_item(0)

        # Look up the name of the star we've just loaded
        object_name = input_spectrum.metadata['Starname']

        # Write log message
        result_log.write("\n[{}] {}... ".format(time.asctime(), object_name))
        result_log.flush()

        # Search for the continuum-normalised version of this same object
        continuum_normalised_spectrum_id = input_library.search(Starname=object_name, continuum_normalised=1)

        # Check that continuum-normalised spectrum exists
        assert len(continuum_normalised_spectrum_id) == 1, "Could not find continuum-normalised spectrum."

        # Load the continuum-normalised version
        input_spectrum_continuum_normalised_arr = input_library.open(ids=continuum_normalised_spectrum_id[0]['specId'])
        input_spectrum_continuum_normalised = input_spectrum_continuum_normalised_arr.extract_item(0)

        # Process spectra through 4FS
        degraded_spectra = etc_wrapper.process_spectra(
            spectra_list=((input_spectrum, input_spectrum_continuum_normalised),)
        )

        # Import degraded spectra into output spectrum library
        for mode in degraded_spectra:
            for index in degraded_spectra[mode]:
                for snr in degraded_spectra[mode][index]:
                    for spectrum_type in degraded_spectra[mode][index][snr]:
                        output_libraries[mode].insert(spectra=degraded_spectra[mode][index][snr][spectrum_type],
                                                      filenames=input_spectrum_id['filename'])

# Clean up 4FS
etc_wrapper.close()
