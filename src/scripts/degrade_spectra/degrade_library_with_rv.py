#!../../../../virtualenv/bin/python2.7
# -*- coding: utf-8 -*-

# NB: The shebang line above assumes you've installed a python virtual environment alongside your working copy of the
# <4most-4gp-scripts> git repository. It also only works if you invoke this python script from the directory where it
# is located. If these two assumptions are incorrect (e.g. you're using Conda), you can still use this script by typing
# <python degrade_library_with_rv.py>, but <./degrade_library_with_rv.py> will not work.

"""
Take a library of spectra, perhaps generated by Turbospectrum, and add some radial velocity(s) to them.
"""

import argparse
import os
from os import path as os_path
import hashlib
import time
import re
import logging
import numpy as np

from fourgp_speclib import SpectrumLibrarySqlite
from fourgp_degrade import GaussianNoise

logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(levelname)s:%(filename)s:%(message)s',
                    datefmt='%d/%m/%Y %H:%M:%S')
logger = logging.getLogger(__name__)

# Read input parameters
our_path = os_path.split(os_path.abspath(__file__))[0]
root_path = os_path.join(our_path, "..", "..")
pid = os.getpid()
parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('--input-library',
                    required=False,
                    default="galah_test_sample_turbospec",
                    dest="input_library",
                    help="The name of the SpectrumLibrary we are to read input spectra from. Stars may be filtered by "
                         "parameters by placing a comma-separated list of constraints in [] brackets after the name of "
                         "the library. Use the syntax [Teff=3000] to demand equality, or [0<[Fe/H]<0.2] to specify a "
                         "range.")
parser.add_argument('--output-library',
                    required=False,
                    default="galah_test_sample_withrv",
                    dest="output_library",
                    help="The name of the SpectrumLibrary we are to feed degradedspectra into.")
parser.add_argument('--workspace', dest='workspace', default="",
                    help="Directory where we expect to find spectrum libraries.")
parser.add_argument('--rv-list',
                    required=False,
                    default="0.1,1,2,5,8,10,20,50",
                    dest="rv_list",
                    help="Specify a comma-separated list of the RVs (km/s) that we should add to spectra.")
parser.add_argument('--create',
                    required=False,
                    action='store_true',
                    dest="create",
                    help="Create a clean SpectrumLibrary to feed synthesized spectra into")
parser.add_argument('--no-create',
                    required=False,
                    action='store_false',
                    dest="create",
                    help="Do not create a clean SpectrumLibrary to feed synthesized spectra into")
parser.set_defaults(create=True)
parser.add_argument('--db-in-tmp',
                    action='store_true',
                    dest="db_in_tmp",
                    help="Symlink database into /tmp while we're putting data into it (for performance). "
                         "Not recommended.")
parser.add_argument('--no-db-in-tmp',
                    action='store_false',
                    dest="db_in_tmp",
                    help="Do not symlink database into /tmp while we're putting data into it. Recommended")
parser.set_defaults(db_in_tmp=False)
parser.add_argument('--log-file',
                    required=False,
                    default="/tmp/addrv_{}.log".format(pid),
                    dest="log_to",
                    help="Specify a log file where we log our progress.")
args = parser.parse_args()

logger.info("Adding radial velocities to spectra with arguments <{}> <{}>".format(args.input_library,
                                                                                  args.output_library))

# Set path to workspace where we create libraries of spectra
workspace = args.workspace if args.workspace else os_path.join(our_path, "..", "workspace")
os.system("mkdir -p {}".format(workspace))

# Open input SpectrumLibrary
spectra = SpectrumLibrarySqlite.open_and_search(library_spec=args.input_library,
                                                workspace=workspace,
                                                extra_constraints={"continuum_normalised": 0}
                                                )
input_library, input_spectra_ids, input_spectra_constraints = [spectra[i] for i in ("library", "items", "constraints")]

# Create new SpectrumLibrary
library_name = re.sub("/", "_", args.output_library)
library_path = os_path.join(workspace, library_name)
output_library = SpectrumLibrarySqlite(path=library_path, create=args.create)

# We may want to symlink the sqlite3 database file into /tmp for performance reasons...
if args.db_in_tmp:
    del output_library
    os.system("mv {} /tmp/tmp_{}.db".format(os_path.join(library_path, "index.db"), library_name))
    os.system("ln -s /tmp/tmp_{}.db {}".format(library_name, os_path.join(library_path, "index.db")))
    output_library = SpectrumLibrarySqlite(path=library_path, create=False)

# Radial velocities to apply
rv_list = [float(item.strip()) for item in args.rv_list.split(",")]

# Loop over spectra to process
with open(args.log_to, "w") as result_log:
    for input_spectrum_id in input_spectra_ids:
        logger.info("Working on <{}>".format(input_spectrum_id['filename']))
        # Open Spectrum data from disk
        input_spectrum_array = input_library.open(ids=input_spectrum_id['specId'])
        input_spectrum = input_spectrum_array.extract_item(0)

        # Look up the name of the star we've just loaded
        spectrum_matching_field = 'uid' if 'uid' in input_spectrum.metadata else 'Starname'
        object_name = input_spectrum.metadata[spectrum_matching_field]

        # Write log message
        result_log.write("\n[{}] {}... ".format(time.asctime(), object_name))
        result_log.flush()

        # Search for the continuum-normalised version of this same object
        search_criteria = input_spectra_constraints.copy()
        search_criteria[spectrum_matching_field] = object_name
        search_criteria['continuum_normalised'] = 1
        continuum_normalised_spectrum_id = input_library.search(**search_criteria)

        # Check that continuum-normalised spectrum exists
        assert len(continuum_normalised_spectrum_id) == 1, "Could not find continuum-normalised spectrum."

        # Load the continuum-normalised version
        input_spectrum_continuum_normalised_arr = input_library.open(ids=continuum_normalised_spectrum_id[0]['specId'])
        input_spectrum_continuum_normalised = input_spectrum_continuum_normalised_arr.extract_item(0)

        # Process spectra with each RV value in turn
        for rv in rv_list:
            degraded = input_spectrum.apply_radial_velocity(rv * 1000)
            degraded_cn = input_spectrum_continuum_normalised.apply_radial_velocity(rv * 1000)

            unique_id = hashlib.md5(os.urandom(32).encode("hex")).hexdigest()[:16]
            output_library.insert(spectra=degraded,
                                  filenames=input_spectrum_id['filename'],
                                  metadata_list={"uid": unique_id, "rv": rv * 1000})
            output_library.insert(spectra=degraded_cn,
                                  filenames=input_spectrum_id['filename'],
                                  metadata_list={"uid": unique_id, "rv": rv * 1000})


# If we put database in /tmp while adding entries to it, now return it to original location
if args.db_in_tmp:
    del output_library
    os.system("mv /tmp/tmp_{}.db {}".format(library_name, os_path.join(library_path, "index.db")))
