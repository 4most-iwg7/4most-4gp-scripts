#!/usr/bin/env python2.7
# -*- coding: utf-8 -*-

"""
Take a library of spectra, perhaps generated by Turbospectrum, and add photometry metadata to it.
"""

import argparse
import os
from os import path as os_path
import time
import logging

from fourgp_speclib import SpectrumLibrarySqlite

logging.basicConfig(level=logging.INFO, format='[%(asctime)s] %(levelname)s:%(filename)s:%(message)s',
                    datefmt='%d/%m/%Y %H:%M:%S')
logger = logging.getLogger(__name__)

# Read input parameters
our_path = os_path.split(os_path.abspath(__file__))[0]
root_path = os_path.join(our_path, "..", "..")
pid = os.getpid()
parser = argparse.ArgumentParser(description=__doc__)
parser.add_argument('--input-library',
                    required=False,
                    default="galah_training_sample_turbospec",
                    dest="input_library",
                    help="The name of the SpectrumLibrary we are to read input spectra from, and to which we add "
                         "photometry metadata.")
parser.add_argument('--workspace', dest='workspace', default="",
                    help="Directory where we expect to find spectrum libraries.")
parser.add_argument('--photometric-bands',
                    required=False,
                    default="GROUND_COUSINS_I,GROUND_COUSINS_R,GROUND_JOHNSON_B,GROUND_JOHNSON_V,"
                            "SDSS_g,SDSS_i,SDSS_r,SDSS_u,SDSS_z",
                    dest="photometric_bands",
                    help="Specify a comma-separated list of the photometric bands to add to the metadata.")
parser.add_argument('--log-file',
                    required=False,
                    default="/tmp/photometry_apokasc_{}.log".format(pid),
                    dest="log_to",
                    help="Specify a log file where we log our progress.")
args = parser.parse_args()

logger.info("Adding photometry to spectra with arguments <{}> <{}>".format(args.input_library,
                                                                           args.photometric_bands))

# Set path to workspace where we create libraries of spectra
workspace = args.workspace if args.workspace else os_path.join(our_path, "..", "workspace")

# Open input SpectrumLibrary
spectra = SpectrumLibrarySqlite.open_and_search(library_spec=args.input_library,
                                                workspace=workspace,
                                                extra_constraints={"continuum_normalised": 0}
                                                )
input_library, input_spectra_ids, input_spectra_constraints = [spectra[i] for i in ("library", "items", "constraints")]

# Loop over spectra to process
with open(args.log_to, "w") as result_log:
    for input_spectrum_id in input_spectra_ids:
        logger.info("Working on <{}>".format(input_spectrum_id['filename']))

        # Open Spectrum data from disk
        input_spectrum_array = input_library.open(ids=input_spectrum_id['specId'])
        input_spectrum = input_spectrum_array.extract_item(0)

        # Look up the name of the star we've just loaded
        spectrum_matching_field = 'uid' if 'uid' in input_spectrum.metadata else 'Starname'
        object_name = input_spectrum.metadata[spectrum_matching_field]

        # Write log message
        result_log.write("\n[{}] {}... ".format(time.asctime(), object_name))
        result_log.flush()

        # Search for the continuum-normalised version of this same object
        search_criteria = input_spectra_constraints.copy()
        search_criteria[spectrum_matching_field] = object_name
        search_criteria['continuum_normalised'] = 1
        continuum_normalised_spectrum_id = input_library.search(**search_criteria)

        # Check that continuum-normalised spectrum exists
        assert len(continuum_normalised_spectrum_id) == 1, "Could not find continuum-normalised spectrum."

        # Load the continuum-normalised version
        input_spectrum_continuum_normalised_arr = input_library.open(ids=continuum_normalised_spectrum_id[0]['specId'])
        input_spectrum_continuum_normalised = input_spectrum_continuum_normalised_arr.extract_item(0)

        # Do photometry on the spectrum
        new_metadata = {}
        for band in args.photometric_bands.split(","):
            band = band.strip()
            magnitude = input_spectrum.photometry(band=band)
            new_metadata["photometry_{:s}".format(band)] = magnitude

        # Insert new metadata into spectrum library
        input_library.set_metadata(metadata=new_metadata, ids=[
            input_spectrum_id['specId'], continuum_normalised_spectrum_id[0]['specId']
        ])

# Clean up spectrum library
input_library.close()
